//
//  ContentView.swift
//  HelloSwift
//
//  Created by Ê¢ÅÂÆ∂Êñ∞ on 2021/8/27.
//

import SwiftUI

struct ContentView: View {
    let rTarget = Double.random(in: 0..<1)
    let gTarget = Double.random(in: 0..<1)
    let bTarget = Double.random(in: 0..<1)
    @State var rGuess: Double
    @State var gGuess: Double
    @State var bGuess: Double
    @State var showScoreAlert = false
    @State var showChangeAlert = false
    
    /**
     * diffÂÄºÂè™ÊòØ‰∏âÁª¥Á©∫Èó¥‰∏≠‰∏§ÁÇπ‰πãÈó¥ÁöÑË∑ùÁ¶ª - Áî®Êà∑ÁöÑÈîôËØØ„ÄÇ Ë¶ÅËé∑ÂæóÂàÜÊï∞ÔºåËØ∑‰ªé1ÂáèÂéªdiffÔºåÁÑ∂ÂêéÂ∞ÜÂÖ∂Áº©ÊîæÂà∞100‰ª•Â§ñÁöÑÂÄº„ÄÇËæÉÂ∞èÁöÑdiff‰ºö‰∫ßÁîüËæÉÈ´òÁöÑÂàÜÊï∞„ÄÇ
     * - Returns: ÊàêÁª©
     */
    func computeScore() -> Int {
        let rDiff = rGuess - rTarget
        let gDiff = gGuess - gTarget
        let bDiff = bGuess - bTarget
        let diff = sqrt(rDiff * rDiff + gDiff * gDiff + bDiff * bDiff)
        return Int((1.0 - diff) * 100.0 + 0.5)
    }
    
    var body: some View {
        VStack {
            HStack {
//                Text("Target Color Block").padding()
                VStack {
                    Rectangle().foregroundColor(Color(red: rTarget, green: gTarget, blue: bTarget))
                    Text("üéÆÂåπÈÖçÈ¢úËâ≤üåà")
                }
//                Text("Guess Color Block").padding()
                VStack {
                    Rectangle().foregroundColor(Color(red: rGuess, green: gGuess, blue: bGuess, opacity: 1.0))
                    HStack {
                        Text("Á∫¢: \(Int(rGuess * 255.0))")
                        Text("Áªø: \(Int(gGuess * 255.0))")
                        Text("Ëìù: \(Int(bGuess * 255.0))")
                    }
                }
            }
            
            HStack {
                VStack {
                    Button(action: {
                        self.showScoreAlert = true
                    }) {
                        Text("üíª").padding()
                    }.alert(isPresented: $showScoreAlert) {
                        Alert(title: Text("üíØ"), message: Text("\(computeScore())"), dismissButton: .default(Text("üëå")))
                    }
                }
                VStack {
                    Text("|")
                }.padding()
                VStack {
                    Button(action: {
                        self.rGuess = Double.random(in: 0..<1)
                        self.gGuess = Double.random(in: 0..<1)
                        self.bGuess = Double.random(in: 0..<1)
                        self.showChangeAlert = true
                    }, label: {
                        Text("üëã").padding()
                    }).alert(isPresented: $showChangeAlert) { () -> Alert in
                        Alert(title: Text("Êõ¥Êç¢üòäÊàêÂäü"), dismissButton: .default(Text("üëå")))
                    }
                }
            }
            
            VStack {
//                Text("Red slider")
//                Text("Green slider")
//                Text("Blue slider")
                
                // Ëâ≤ÊùøÊéßÂà∂Âô®
                ColorSlider(value: $rGuess, textColor: .red)
                ColorSlider(value: $gGuess, textColor: .green)
                ColorSlider(value: $bGuess, textColor: .blue)
            }
        }
        
    }
}

#if DEBUG
//struct ContentView_Previews: PreviewProvider {
//    static var previews: some View {
//        ContentView(rGuess: 0.5, gGuess: 0.5, bGuess: 0.5)
//    }
//}
#endif 


class SceneDelegate: UIResponder, UIWindowSceneDelegate {

    var window: UIWindow?

    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {

        let contentView = ContentView(rGuess: 0.5, gGuess: 0.5, bGuess: 0.5)

        if let windowScene = scene as? UIWindowScene {
            let window = UIWindow(windowScene: windowScene)
            window.rootViewController = UIHostingController(rootView: contentView)
            
            self.window = window
            window.makeKeyAndVisible()
        }
    }
}

    
struct ColorSlider: View {
    @Binding var value: Double
    var textColor: Color
    var body: some View {
        HStack {
            Text("0").foregroundColor(textColor)
            Slider(value: $value)
            Text("255").foregroundColor(textColor)
        }.padding()
    }
}
